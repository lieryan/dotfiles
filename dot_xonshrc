# XONSH WIZARD START
$AUTO_CD = '1'
$AUTO_CONTINUE = '1'
$AUTO_PUSHD = '1'
$AUTO_SUGGEST_IN_COMPLETIONS = '1'
$COMMANDS_CACHE_SAVE_INTERMEDIATE = '1'
$COMPLETIONS_BRACKETS = ''
$COMPLETION_IN_THREAD = '1'
$DYNAMIC_CWD_ELISION_CHAR = 'â€¦'
$DYNAMIC_CWD_WIDTH = '40'
$ENABLE_ASYNC_PROMPT = '0'
$FUZZY_PATH_COMPLETION = ''
$UPDATE_OS_ENVIRON = '1'
$VI_MODE = '1'
$XONSH_CTRL_BKSP_DELETION = '1'
$XONSH_HISTORY_BACKEND = 'sqlite'
$XONSH_HISTORY_SIZE = '10000'
# source-zsh "echo loading xonsh foreign shell"
xontrib load argcomplete cmd_done docker_tabcomplete hist_navigator kitty whole_word_jumping
# XONSH WIZARD END

xontrib load vox autovox avox_poetry
$VIRTUALENV_HOME = "~/.virtualenvs/"
aliases["workon"] = "vox workon"
aliases["deactivate"] = "vox deactivate"
$PROJECT_DIRS = [p"~/Projects"]

$PATH.extend(["$HOME/bin", "$HOME/.local/bin"])

import os
from pathlib import Path


def _cwd_abbrev():
    try:
        cwd = Path.cwd()
    except FileNotFoundError:
        cwd = os.environ["PWD"]
    cwd: Path = Path(str(cwd).replace(str(Path.home()), '~'))
    parts: list = [p[:2] for p in cwd.parts[:-1]] + [cwd.parts[-1]]
    cwd = str(Path(*parts))
    if len(cwd) > $DYNAMIC_CWD_WIDTH[0]:
        cwd = $DYNAMIC_CWD_ELISION_CHAR + cwd[-int($DYNAMIC_CWD_WIDTH[0]):]
    return cwd


def _autouser():
    return "" if os.getlogin() == "lieryan" else os.getlogin()

def _prompt():
    return "{YELLOW}{env_name}{BOLD_GREEN}{autouser}{BOLD_BLUE}{BOLD_GREEN}{cwd_abbrev}{RESET} {prompt_end} "


$PROMPT_FIELDS["cwd_abbrev"] = _cwd_abbrev
$PROMPT_FIELDS["autouser"] = _autouser

$BOTTOM_TOOLBAR = "{gitstatus.operations}{gitstatus}"
$RIGHT_PROMPT = "# {localtime}"
$PROMPT = _prompt


@events.vox_on_activate
def install_pydev_tools(name: str, path: Path):
    if len(pf`{path}/lib/python[\\d.]*/site-packages/(pudb|ipykernel|IPython)` ) != 3:
        print("installing dev tools")
        python_executable = Path(path) / "bin/python"
        @(python_executable) -m pip install pudb ipykernel ipython
    else:
        # dev tools already installed
        pass


def s(cmd):
    return ![ xonsh -c @(cmd) ]

$FZF_DEFAULT_COMMAND = 'ack -f'
